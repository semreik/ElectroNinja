Use the following instructions as a guide to understand the structure of an .asc file.

1. Understand Your Circuit
Identify Components & Connections:
List every component (voltage sources, resistors, capacitors, etc.) and decide how they will be connected (series, parallel, etc.).
Assign Logical Names:
Give each component a unique instance name (like V1, R1, C1) and decide what values or behavioral functions they will have (e.g., a sine wave, 1 kΩ resistor). These names and values are later written as attributes in the file.

Define a Fixed Node Mapping:

Create a dictionary of node names and fixed coordinates. For example:
Node_1 (connection between component A and wire A left end): (x1, y1)
Node_2 (connection between component B and wire A right end): (x2, y2)
Node_3 (connection between middle of wire A and wire C top end): (x3, y3)

Before writing the .asc code, come up with a node coordinate for all the connections that need to be made by each components. (i.e. between wires to create a corner/junction, between a component and an end of a wire, and between two components needing direct connection). Use these exact coordinates for every connection that should share the same node.
Remember that each component has a fixed length (specified in component details section) so the gap between the wires need to be exactly the length of the component for the connection to be made. (i.e. if two wires are coming out of the horizontal resistor, it should have an x-coordinate difference of 80 and for a vertical resistor, the y-coordinate difference should be 80)
However, this does not mean that you need to use only one straight wire to connect multiple components--do not hesitate to use multiple wires for each connection, since a single wire cannot bend if you want more space you might want to use one wire to extend off a component and create a corner for another perpendicular wire to connect to another component.

Component Placement:

When placing each component, specify the exact coordinates for each connection pin by referencing the predefined node mapping.
For example, if a voltage source’s lower pin connects to Node_A, its coordinate must be (96, 96) exactly.

Drawing Wires:

Always draw wires with endpoints that exactly match the coordinates of the nodes defined in your mapping.
For any wire connecting two components at a shared node, both endpoints must use the same coordinates from the node dictionary.

2. Familiarize Yourself with the .asc File Structure
File Header and Sheet Definition:
Most .asc files start with a version number (for example, Version 4) and then define a “sheet” or canvas with a command like: 

SHEET 1 880 680

The numbers define the sheet number and the width and height of the canvas. You don’t have to pick these numbers exactly—they just need to be large enough to accommodate your layout.

Component Placement, Wires, and Flags:
The file uses commands such as SYMBOL for placing components, WIRE for drawing connections, and FLAG for naming nets (for example, ground).

3. Choose a Coordinate System
Define a Grid:
Even if you don’t have fixed positions yet, decide on a grid (for example, 10 or 16 units apart) to keep the layout neat.

Relative Positioning:
Place the components relative to each other (for example, a voltage source on the left, then a resistor to its right, and so on). You’ll use coordinate pairs (x, y) when “drawing” each element.

Reference Points (IMPORTANT!):
As each components have two nodes but in the .asc file it only allows one coordinate placed, you need to understand which point is used as a reference point to place the component.
For an unrotated component, the TOP node is always the reference node, but the actual reference point has a slight offset from the actual coordinate it appears in LTspice.
The amount of offset in x and y directions depend on the type of component and its rotation (this will be specified later in component details section).

4. Write the File Step by Step
A. Start with the Header
Write the version and sheet lines. For example:

Version 4
SHEET 1 880 680

B. Place Your Components Using SYMBOL Commands
Component Syntax:
The general format is:

SYMBOL <component_type> <x_coord> <y_coord> <rotation_angle>

For instance, to place a voltage source you might write:

SYMBOL voltage 96 112 R0

Choose the coordinates based on the nodes that you established initially/

Add Label Windows:
Many components include WINDOW lines that tell the editor where to display labels like the instance name or value. Although optional in your first pass, note that these lines control the text placement.

C. Set Component Attributes
Instance Name & Value:
For each symbol, follow it with attribute lines. For example:

SYMATTR InstName V1
SYMATTR Value SINE(0 AC 1)

This assigns the voltage source the name “V1” and a sine wave value. Repeat for each component (e.g., R1, C1).

D. Draw the Wiring Between Components
WIRE Command:
Use lines that specify the starting and ending coordinates. The syntax is:

WIRE <x1> <y1> <x2> <y2>

Decide on connection points so that the wires attach to the component “pins” (the coordinates that coincide with the component symbol’s designated connection points). For example, connecting a voltage source to a resistor might look like:

WIRE 176 96 96 96

Use the pre-defined node coordinates to decide what coordinate each end of the wire should have.

Plan the Routing:
Arrange wires so that the layout is clear. You may have horizontal and vertical segments that join at “junctions.”

E. Define Nets with Flags and I/O Pins
FLAG Command:
Use flags to assign names to nets (e.g., ground). For example:

FLAG 96 272 0
This designates the net at (96,272) as “0” (ground).

IOPIN for External Connections:
To mark a node for external connections (an input or output), use:

IOPIN 352 96 Out

This tells the editor and any simulation tool that this node is an interface point.

5. Important things to check:
With all components, wires, and flags written out, review the file for consistency. Ensure that:
Coordinates for wire endpoints match up with the corresponding component pins.
Make sure every single components have both nodes connected to the wire. Don't only check the reference node, use the component length and its rotational orientation to find out the coordinate for the other node and check for connection.
The layout flows logically (inputs on one side, outputs on the other, and clear routing of ground nets).
Use Placeholders if Needed:
If you’re unsure of exact component values or positions, use placeholders or estimate positions based on your grid. You can always edit these later once you test the schematic in a simulation tool.

IMPORTANT: Make sure that you make long wires and you leave a lot of space between components so that the circuit looks better and more understandable!